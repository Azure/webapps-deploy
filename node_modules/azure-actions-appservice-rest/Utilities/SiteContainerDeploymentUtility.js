"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SiteContainerDeploymentUtility = void 0;
const core = require("@actions/core");
const ErrorHandlerUtility_1 = require("../Arm/ErrorHandlerUtility");
const SiteContainer_1 = require("../Arm/SiteContainer");
class SiteContainerDeploymentUtility {
    constructor(appService) {
        this._appService = appService;
    }
    updateSiteContainer(siteContainer) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const properties = yield this.filterProperties(siteContainer);
                return yield this._appService.updateSiteContainer(properties, siteContainer.getName());
            }
            catch (error) {
                throw Error("Failed to update SiteContainer, Error: " + ErrorHandlerUtility_1.getFormattedError(error));
            }
        });
    }
    filterProperties(siteContainer) {
        return __awaiter(this, void 0, void 0, function* () {
            const filteredProperties = {};
            const environmentVariablesProperties = [];
            if (siteContainer.getEnvironmentVariables()) {
                siteContainer.getEnvironmentVariables().forEach(env => {
                    environmentVariablesProperties.push(SiteContainer_1.EnvironmentVariable.toJson(env));
                });
            }
            const volumeMountsProperties = [];
            if (siteContainer.getVolumeMounts()) {
                siteContainer.getVolumeMounts().forEach((mount) => {
                    volumeMountsProperties.push(SiteContainer_1.VolumeMount.toJson(mount));
                });
            }
            const allProperties = {
                image: siteContainer.getImage(),
                targetPort: siteContainer.getTargetPort(),
                isMain: siteContainer.getIsMain(),
                startupCommand: siteContainer.getStartupCommand(),
                authType: siteContainer.getAuthType(),
                userName: siteContainer.getUserName(),
                passwordSecret: siteContainer.getPasswordSecret(),
                userManagedIdentityClientId: siteContainer.getUserManagedIdentityClientId(),
                inheritAppSettingsAndConnectionStrings: siteContainer.getInheritAppSettingsAndConnectionStrings()
            };
            for (const key in allProperties) {
                const value = allProperties[key];
                if (value !== null && value !== undefined && value !== '') {
                    filteredProperties[key] = value;
                }
            }
            if (volumeMountsProperties.length > 0) {
                filteredProperties["volumeMounts"] = volumeMountsProperties;
            }
            if (environmentVariablesProperties.length > 0) {
                filteredProperties["environmentVariables"] = environmentVariablesProperties;
            }
            core.info(`Filtered properties for SiteContainer: ${JSON.stringify(filteredProperties)}`);
            return filteredProperties;
        });
    }
}
exports.SiteContainerDeploymentUtility = SiteContainerDeploymentUtility;
