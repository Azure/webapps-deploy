"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core = require("@actions/core");
const exec = require("@actions/exec");
const io = require("@actions/io");
class AzureCLIAuthorizer {
    constructor() {
        this._token = '';
        this._subscriptionId = '';
        this._cloudSuffixes = {};
        this._cloudEndpoints = {};
    }
    static getAuthorizer() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._authorizer) {
                this._authorizer = new AzureCLIAuthorizer();
                yield this._authorizer._initialize();
            }
            return this._authorizer;
        });
    }
    get subscriptionID() {
        return this._subscriptionId;
    }
    get baseUrl() {
        return this._cloudEndpoints['resourceManager'] || 'https://management.azure.com/';
    }
    getCloudSuffixUrl(suffixName) {
        return this._cloudSuffixes[suffixName];
    }
    getCloudEndpointUrl(endpointName) {
        return this._cloudEndpoints[endpointName];
    }
    getToken(force, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._token || force) {
                try {
                    let azAccessToken = JSON.parse(yield AzureCLIAuthorizer.executeAzCliCommand('account get-access-token', !!args ? args : []));
                    core.setSecret(azAccessToken);
                    this._token = azAccessToken['accessToken'];
                }
                catch (error) {
                    console.log('Failed to fetch Azure access token');
                    throw error;
                }
            }
            return this._token;
        });
    }
    static executeAzCliCommand(command, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let azCliPath = yield AzureCLIAuthorizer._getAzCliPath();
            let stdout = '';
            let stderr = '';
            try {
                core.debug(`"${azCliPath}" ${command}`);
                yield exec.exec(`"${azCliPath}" ${command}`, args, {
                    silent: true,
                    listeners: {
                        stdout: (data) => {
                            stdout += data.toString();
                        },
                        stderr: (data) => {
                            stderr += data.toString();
                        }
                    }
                });
            }
            catch (error) {
                throw new Error(stderr);
            }
            return stdout;
        });
    }
    static _getAzCliPath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._azCliPath) {
                this._azCliPath = yield io.which('az', true);
            }
            return this._azCliPath;
        });
    }
    _initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            let azAccountDetails = JSON.parse(yield AzureCLIAuthorizer.executeAzCliCommand('account show'));
            let azCloudDetails = JSON.parse(yield AzureCLIAuthorizer.executeAzCliCommand('cloud show'));
            this._subscriptionId = azAccountDetails['id'];
            this._cloudSuffixes = azCloudDetails['suffixes'];
            this._cloudEndpoints = azCloudDetails['endpoints'];
        });
    }
}
exports.AzureCLIAuthorizer = AzureCLIAuthorizer;
