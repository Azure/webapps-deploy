import { createHmac } from "crypto";
export var Algorithm;
(function (Algorithm) {
    Algorithm["SHA1"] = "sha1";
    Algorithm["SHA256"] = "sha256";
})(Algorithm || (Algorithm = {}));
export function sign(options, payload) {
    const { secret, algorithm } = typeof options === "string"
        ? { secret: options, algorithm: Algorithm.SHA1 }
        : {
            secret: options.secret,
            algorithm: options.algorithm || Algorithm.SHA1,
        };
    if (!secret || !payload) {
        throw new TypeError("[@octokit/webhooks] secret & payload required");
    }
    if (!Object.values(Algorithm).includes(algorithm)) {
        throw new TypeError(`[@octokit/webhooks] Algorithm ${algorithm} is not supported. Must be  'sha1' or 'sha256'`);
    }
    payload =
        typeof payload === "string" ? payload : toNormalizedJsonString(payload);
    return `${algorithm}=${createHmac(algorithm, secret)
        .update(payload)
        .digest("hex")}`;
}
function toNormalizedJsonString(payload) {
    return JSON.stringify(payload).replace(/[^\\]\\u[\da-f]{4}/g, (s) => {
        return s.substr(0, 3) + s.substr(3).toUpperCase();
    });
}
