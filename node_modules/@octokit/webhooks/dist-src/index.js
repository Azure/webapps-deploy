import { createLogger } from "./createLogger";
import { createEventHandler } from "./event-handler/index";
import { createMiddleware } from "./middleware-legacy/index";
import { middleware } from "./middleware-legacy/middleware";
import { verifyAndReceive } from "./middleware-legacy/verify-and-receive";
import { sign } from "./sign/index";
import { verify } from "./verify/index";
export { createNodeMiddleware } from "./middleware/node/index";
// U holds the return value of `transform` function in Options
class Webhooks {
    constructor(options) {
        if (!options || !options.secret) {
            throw new Error("[@octokit/webhooks] options.secret required");
        }
        const state = {
            eventHandler: createEventHandler(options),
            path: options.path || "/",
            secret: options.secret,
            hooks: {},
            log: createLogger(options.log),
        };
        if ("path" in options) {
            state.log.warn("[@octokit/webhooks] `path` option is deprecated and will be removed in a future release of `@octokit/webhooks`. Please use `createNodeMiddleware(webhooks, { path })` instead");
        }
        this.sign = sign.bind(null, options.secret);
        this.verify = verify.bind(null, options.secret);
        this.on = state.eventHandler.on;
        this.onAny = state.eventHandler.onAny;
        this.onError = state.eventHandler.onError;
        this.removeListener = state.eventHandler.removeListener;
        this.receive = state.eventHandler.receive;
        this.verifyAndReceive = verifyAndReceive.bind(null, state);
        this.middleware = function deprecatedMiddleware(request, response, next) {
            state.log.warn("[@octokit/webhooks] `webhooks.middleware` is deprecated and will be removed in a future release of `@octokit/webhooks`. Please use `createNodeMiddleware(webhooks)` instead");
            return middleware(state, request, response, next);
        };
    }
}
/** @deprecated `createWebhooksApi()` is deprecated and will be removed in a future release of `@octokit/webhooks`, please use the `Webhooks` class instead */
const createWebhooksApi = (options) => {
    const log = createLogger(options.log);
    log.warn("[@octokit/webhooks] `createWebhooksApi()` is deprecated and will be removed in a future release of `@octokit/webhooks`, please use the `Webhooks` class instead");
    return new Webhooks(options);
};
export { createEventHandler, createMiddleware, createWebhooksApi, Webhooks, sign, verify, };
