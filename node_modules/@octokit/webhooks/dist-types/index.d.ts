/// <reference types="node" />
import { IncomingMessage, ServerResponse } from "http";
import { createEventHandler } from "./event-handler/index";
import { createMiddleware } from "./middleware-legacy/index";
import { sign } from "./sign/index";
import { EmitterWebhookEvent, EmitterWebhookEventName, HandlerFunction, Options, WebhookError, WebhookEventHandlerError } from "./types";
import { verify } from "./verify/index";
export { createNodeMiddleware } from "./middleware/node/index";
declare class Webhooks<TTransformed = unknown> {
    sign: (payload: string | object) => string;
    verify: (eventPayload: string | object, signature: string) => boolean;
    on: <E extends EmitterWebhookEventName>(event: E | E[], callback: HandlerFunction<E, TTransformed>) => void;
    onAny: (callback: (event: EmitterWebhookEvent) => any) => void;
    onError: (callback: (event: WebhookEventHandlerError) => any) => void;
    removeListener: <E extends EmitterWebhookEventName>(event: E | E[], callback: HandlerFunction<E, TTransformed>) => void;
    receive: (event: EmitterWebhookEvent) => Promise<void>;
    verifyAndReceive: (options: EmitterWebhookEvent & {
        signature: string;
    }) => Promise<void>;
    /**
     * @deprecated use `createNodeMiddleware(webhooks)` instead
     */
    middleware: (request: IncomingMessage, response: ServerResponse, next?: (err?: any) => void) => void | Promise<void>;
    constructor(options: Options<TTransformed> & {
        secret: string;
    });
}
/** @deprecated `createWebhooksApi()` is deprecated and will be removed in a future release of `@octokit/webhooks`, please use the `Webhooks` class instead */
declare const createWebhooksApi: <TTransformed>(options: Options<TTransformed> & {
    secret: string;
}) => Webhooks<TTransformed>;
export { createEventHandler, createMiddleware, createWebhooksApi, Webhooks, EmitterWebhookEvent, WebhookError, sign, verify, };
